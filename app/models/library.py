from uuid import uuid4
from datetime import datetime
from typing import List, Optional, TYPE_CHECKING

from sqlalchemy import String, Boolean, ForeignKey, JSON, Date, Integer, Float, Text, ARRAY
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship, Mapped, mapped_column, relationships
from werkzeug.security import generate_password_hash, check_password_hash

from ..extensions import db
from .user import User
from .community import Fandom
from .common import (
    Genre, Language, Nationality, Contribution, Country, Calendar, Keyword, Theme, Tag, Period, Wiki, Dashboard
)

if TYPE_CHECKING:
    from .scrolls import Scroll
    from .user import User
    from .journal import Magazine, Article
    from .player import Bookmark, WatchHistory
    from .community import Hive, Clique, Comment, Reaction
    from .commerce import Fund, Shop, Transaction, Asset, Exchange, Merchandise
    from .common import Contribution


def generate_uuid():
    return str(uuid4())


class Library:
    pass


class Collection:
    pass


class Portfolio:
    pass


class Film(db.Model):
    """
    Represents a Film entity in the database, including its key attributes, relationships,
    and metadata. This class captures detailed information about films, such as their titles,
    runtime, release dates, ratings from external sources, streaming availability, and more.

    Designed for managing the data of films through a relational database, this class supports
    essential features like metadata tracking, external data integrations, and user contributions.
    It also models relationships with genres, themes, keywords, studios, languages, countries,
    and periods.

    :ivar id: Unique identifier for the film.
    :ivar title: Title of the film.
    :ivar original_title: Original title of the film, if different from the title.
    :ivar release_date: Release date of the film.
    :ivar runtime: Runtime of the film in minutes.
    :ivar synopsis: Synopsis or brief description of the film's plot.
    :ivar poster_url: URL of the film's poster image.
    :ivar backdrop_url: URL of the film's backdrop image.
    :ivar is_verified: Indicates whether the film record is verified.
    :ivar available_locally: Indicates whether the film is available locally on the platform.
    :ivar streaming_links: List of streaming platform URLs where the film is available.
    :ivar trailer_url: URL of the film's trailer.
    :ivar watch_count: Number of times the film has been watched.
    :ivar average_progress: Average viewing progress for the film (e.g., in percentage).
    :ivar popularity_score: Popularity score of the film, typically calculated based on viewership data.
    :ivar scroll_stats: Scroll statistics for the film, represented as a JSON field.
    :ivar viewer_tags: List of tags provided by viewers for categorizing the film.
    :ivar contributed_by_id: ID of the user who contributed the film entry.
    :ivar contributor_score: Score indicating the contributor's reputation or quality of contributions.
    :ivar submission_status: Current submission status of the film (e.g., Draft, Published).
    :ivar edit_history: List of UUIDs representing the film's edit history.
    :ivar imdb_id: Identifier of the film in the IMDb database.
    :ivar tmdb_id: Identifier of the film in the TMDb database.
    :ivar imdb_rating: IMDb rating of the film.
    :ivar imdb_votes: Number of votes the film has received on IMDb.
    :ivar tmdb_rating: TMDb rating of the film.
    :ivar tmdb_votes: Number of votes the film has received on TMDb.
    :ivar metascore: Metascore of the film, if available.
    :ivar awards: Awards won by the film.
    :ivar content_rating: Content rating of the film (e.g., PG-13, R).
    :ivar budget: Production budget of the film.
    :ivar revenue: Revenue generated by the film.
    :ivar tagline: Tagline of the film.
    :ivar box_office: Box office performance data of the film.
    :ivar production_companies: List of production companies involved in the film.
    :ivar spoken_languages: List of spoken languages in the film.
    :ivar country_of_origin: List of producing countries for the film.
    :ivar imdb_data: Extended data from IMDb for the film, represented as JSON.
    :ivar tmdb_data: Extended data from TMDb for the film, represented as JSON.
    :ivar genres: List of genres associated with the film.
    :ivar themes: List of themes associated with the film.
    :ivar keywords: List of keywords associated with the film.
    :ivar studios: List of studios associated with the film.
    :ivar languages: List of languages associated with the film (view-only).
    :ivar countries: List of countries associated with the film (view-only).
    :ivar periods: List of historical periods associated with the film (view-only).
    :ivar contributed_by: User who contributed the film entry.
    :ivar created_at: Timestamp indicating when the film entry was created.
    :ivar updated_at: Timestamp indicating when the film entry was last updated.
    """
    __tablename__ = 'films'
    # Core Fields
    id: Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=generate_uuid)
    title: Mapped[str] = mapped_column(String, nullable=False)
    original_title: Mapped[Optional[str]] = mapped_column(String)
    release_date: Mapped[Optional[datetime]] = mapped_column(Date)
    runtime: Mapped[Optional[int]] = mapped_column(Integer)
    synopsis: Mapped[Optional[str]] = mapped_column(Text)
    poster_url: Mapped[Optional[str]] = mapped_column(String)
    backdrop_url: Mapped[Optional[str]] = mapped_column(String)
    is_verified: Mapped[bool] = mapped_column(Boolean, default=False)
    available_locally: Mapped[bool] = mapped_column(Boolean, default=False)
    streaming_links: Mapped[Optional[list[str]]] = mapped_column(ARRAY(String))  # List of URLs
    trailer_url: Mapped[Optional[str]] = mapped_column(String)
    watch_count: Mapped[int] = mapped_column(Integer, default=0)
    average_progress: Mapped[float] = mapped_column(Float, default=0.0)
    popularity_score: Mapped[float] = mapped_column(Float, default=0.0)
    scroll_stats: Mapped[Optional[dict]] = mapped_column(JSON, default={})
    viewer_tags: Mapped[Optional[list[str]]] = mapped_column(ARRAY(String))
    contributed_by_id: Mapped[Optional[UUID]] = mapped_column(ForeignKey('users.id'))
    contributor_score: Mapped[float] = mapped_column(Float, default=0.0)
    submission_status: Mapped[str] = mapped_column(String, default='Draft')
    edit_history: Mapped[Optional[list[UUID]]] = mapped_column(ARRAY(UUID(as_uuid=True)))
    # External data from TMDb / OMDb / IMDb
    imdb_id: Mapped[Optional[str]] = mapped_column(String)
    tmdb_id: Mapped[Optional[int]] = mapped_column(Integer)
    imdb_rating: Mapped[Optional[float]] = mapped_column(Float)
    imdb_votes: Mapped[Optional[int]] = mapped_column(Integer)
    tmdb_rating: Mapped[Optional[float]] = mapped_column(Float)
    tmdb_votes: Mapped[Optional[int]] = mapped_column(Integer)
    metascore: Mapped[Optional[int]] = mapped_column(Integer)
    awards: Mapped[Optional[str]] = mapped_column(String)
    content_rating: Mapped[Optional[str]] = mapped_column(String)
    budget: Mapped[Optional[int]] = mapped_column(Integer)
    revenue: Mapped[Optional[int]] = mapped_column(Integer)
    tagline: Mapped[Optional[str]] = mapped_column(String)
    box_office: Mapped[Optional[str]] = mapped_column(String)
    production_companies: Mapped[Optional[list[str]]] = mapped_column(ARRAY(String))
    spoken_languages: Mapped[Optional[list[str]]] = mapped_column(ARRAY(String))
    country_of_origin: Mapped[Optional[list[str]]] = mapped_column(ARRAY(String))
    imdb_data: Mapped[Optional[dict]] = mapped_column(JSON)
    tmdb_data: Mapped[Optional[dict]] = mapped_column(JSON)
    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=datetime.now)
    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=datetime.now, onupdate=datetime.now)
    # Relationships
    contributed_by = relationship('User', backref='submitted_films')
    genres: Mapped[List["Genre"]] = relationship('Genre', secondary='film_genres', backref='films')
    themes: Mapped[List["Theme"]] = relationship('Theme', secondary='film_themes', backref='films')
    keywords: Mapped[List["Keyword"]] = relationship('Keyword', secondary='film_keywords', backref='films')
    studios: Mapped[List["Studio"]] = relationship('Studio', secondary='film_studios', backref='films')
    languages: Mapped[List["Language"]] = relationship('Language', secondary='film_languages', viewonly=True)
    countries: Mapped[List["Country"]] = relationship('Country', secondary='film_countries', viewonly=True)
    periods: Mapped[List["Period"]] = relationship('Period', secondary='film_periods', viewonly=True)

    def __repr__(self):
        return f"<Film {self.title} ({self.release_date})>"

    def to_dict(self):
        return {
            "id": str(self.id),
            "title": self.title,
            "original_title": self.original_title,
            "release_date": self.release_date.isoformat() if self.release_date else None,
            "runtime": self.runtime,
            "synopsis": self.synopsis,
            "poster_url": self.poster_url,
            "backdrop_url": self.backdrop_url,
            "is_verified": self.is_verified,
            "available_locally": self.available_locally,
            "streaming_links": self.streaming_links,
            "trailer_url": self.trailer_url,
            "watch_count": self.watch_count,
            "average_progress": self.average_progress,
            "popularity_score": self.popularity_score,
            "scroll_stats": self.scroll_stats,
            "viewer_tags": self.viewer_tags,
            "contributed_by_id": str(self.contributed_by_id) if self.contributed_by_id else None,
            "contributor_score": self.contributor_score,
            "submission_status": self.submission_status,
            "edit_history": [str(eid) for eid in self.edit_history] if self.edit_history else [],
            "imdb_id": self.imdb_id,
            "tmdb_id": self.tmdb_id,
            "imdb_rating": self.imdb_rating,
            "imdb_votes": self.imdb_votes,
            "tmdb_rating": self.tmdb_rating,
            "tmdb_votes": self.tmdb_votes,
            "metascore": self.metascore,
            "awards": self.awards,
            "content_rating": self.content_rating,
            "budget": self.budget,
            "revenue": self.revenue,
            "tagline": self.tagline,
            "box_office": self.box_office,
            "production_companies": self.production_companies,
            "spoken_languages": self.spoken_languages,
            "country_of_origin": self.country_of_origin,
            "imdb_data": self.imdb_data,
            "tmdb_data": self.tmdb_data,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class Watchlist:
    pass


class Album:
    pass


class Hitlist:
    pass


class Person(db.Model):
    """
    Represents a person entity within the database.

    This class defines the schema for the `people` table and provides an ORM mapping for 
    a person. It includes basic identifying information such as names, dates, and related 
    data, as well as relationships to other entities like careers, relationships, and 
    fandoms. This class also manages metadata and methods for interaction with person data, 
    including serialization to a dictionary for API outputs.

    :ivar id: Unique identifier for the person entity.
    :type id: UUID
    :ivar first_name: First name of the person.
    :type first_name: str
    :ivar last_name: Last name of the person.
    :type last_name: str
    :ivar full_name: Full name of the person, optionally computed or stored.
    :type full_name: Optional[str]
    :ivar date_of_birth: Birth date of the person.
    :type date_of_birth: Optional[datetime]
    :ivar date_of_death: Death date of the person.
    :type date_of_death: Optional[datetime]
    :ivar avatar_url: URL pointing to the person's avatar image.
    :type avatar_url: Optional[str]
    :ivar bio: A textual biographical summary of the person.
    :type bio: Optional[str]
    :ivar nationality: List of nationalities or countries associated with the person.
    :type nationality: Optional[List[str]]
    :ivar is_verified: Indicates if the person's identity is verified.
    :type is_verified: bool
    :ivar is_linked: Indicates if the person is linked to another entity.
    :type is_linked: bool
    :ivar confidence_score: A numerical measure of profile confidence or completeness.
    :type confidence_score: float
    :ivar contributor_id: Reference to the ID of the user who contributed the record.
    :type contributor_id: Optional[UUID]
    :ivar contributor: ORM relationship to the contributor user entity.
    :type contributor: Optional[User]
    :ivar profession_summary: A brief summary of the person's career or professional focus.
    :type profession_summary: Optional[str]
    :ivar careers: List of career relationships associated with the person.
    :type careers: List[Career]
    :ivar relationships: List of relationships associated with the person.
    :type relationships: List[Relationship]
    :ivar characters: List of characters the person is associated with.
    :type characters: List[Character]
    :ivar fandoms: List of fandoms the person belongs to through association with fandom members.
    :type fandoms: List[Fandom]
    :ivar calendar: Reference to the calendar entity associated with the person.
    :type calendar: Optional[Calendar]
    :ivar wiki: Reference to the wiki entity associated with the person.
    :type wiki: Optional[Wiki]
    :ivar dashboard: Reference to the dashboard entity associated with the person.
    :type dashboard: Optional[Dashboard]
    :ivar created_at: Datetime when the person entry was created.
    :type created_at: datetime
    :ivar updated_at: Datetime when the person entry was last updated.
    :type updated_at: datetime
    """
    __tablename__ = 'people'
    id: Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=generate_uuid)
    first_name: Mapped[str] = mapped_column(String, nullable=False)
    last_name: Mapped[str] = mapped_column(String, nullable=False)
    full_name: Mapped[Optional[str]] = mapped_column(String)
    date_of_birth: Mapped[Optional[datetime]] = mapped_column(Date)
    date_of_death: Mapped[Optional[datetime]] = mapped_column(Date, default=None)
    avatar_url: Mapped[Optional[str]] = mapped_column(String)
    bio: Mapped[Optional[str]] = mapped_column(Text)
    nationality: Mapped[Optional[List[str]]] = mapped_column(ARRAY(String))
    is_verified: Mapped[bool] = mapped_column(Boolean, default=False)
    is_linked: Mapped[bool] = mapped_column(Boolean, default=False)
    confidence_score: Mapped[float] = mapped_column(Float, default=0.0)
    contributor_id: Mapped[Optional[UUID]] = mapped_column(ForeignKey('users.id'))
    contributor: Mapped[Optional["User"]] = relationship('User', backref='submitted_people')
    profession_summary: Mapped[Optional[str]] = mapped_column(String)  # New field summarizing career e.g., "Actor, Producer"
    careers: Mapped[List["Career"]] = relationship('Career', back_populates='person')
    relationships: Mapped[List["Relationship"]] = relationship('Relationship', back_populates='person')
    characters: Mapped[List["Character"]] = relationship('Character', back_populates='person')
    fandoms: Mapped[List["Fandom"]] = relationship('Fandom', secondary='person_fandoms', back_populates='members')
    calendar: Mapped[Optional["Calendar"]] = relationship('Calendar', back_populates='person', uselist=False)
    wiki: Mapped[Optional["Wiki"]] = relationship('Wiki', back_populates='person', uselist=False)
    dashboard: Mapped[Optional["Dashboard"]] = relationship('Dashboard', back_populates='person', uselist=False)
    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=datetime.now)
    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=datetime.now, onupdate=datetime.now)

    def __repr__(self):
        return f"<Person {self.full_name or f'{self.first_name} {self.last_name}'} {self.profession_summary}>"

    def to_dict(self):
        return {
            "id": str(self.id),
            "first_name": self.first_name,
            "last_name": self.last_name,
            "full_name": self.full_name,
            "date_of_birth": self.date_of_birth.isoformat() if self.date_of_birth else None,
            "date_of_death": self.date_of_death.isoformat() if self.date_of_death else None,
            "avatar_url": self.avatar_url,
            "bio": self.bio,
            "nationality": self.nationality,
            "is_verified": self.is_verified,
            "is_linked": self.is_linked,
            "confidence_score": self.confidence_score,
            "contributor_id": str(self.contributor_id) if self.contributor_id else None,
            "profession_summary": self.profession_summary,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class Character:
    pass


class Studio:
    pass


class Career:
    pass


class Relationship:
    pass
